{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Documentation This is the project documentation. It has been broken up into sections for ease of use. Best Practices Code of Conduct Tech Spec","title":"Project Documentation"},{"location":"#project-documentation","text":"This is the project documentation. It has been broken up into sections for ease of use. Best Practices Code of Conduct Tech Spec","title":"Project Documentation"},{"location":"Best_Practices/","text":"Best Practices Code for Baltimore projects should be built with the intention of deploying on Heroku or Netlify . For details on Heroku Best Practices see their developer documentation . Best Practices Project Management Projects Issues and Milestones Tagging Issues Code Quality Standards Style Guides Static Code Analysis Git and Branching Branch Names Merging and Pull Requests Project Management We are using Github Issues to track outstanding issues and work for projects. Projects Github Projects help organize our repositories by creating a Kanban board to track issues. These boards can be automatically generated by Github when creating the Project and should include a Todo, In Progress, Under Review, Reviewer Approved, and Done column. As issues are added to a Project they should be added to the board. A repo can have one or many Projects or boards at any given time. Issues and Milestones When breaking down work it is important to add tasks to the Github project. For convenience various types of issues have templates built into this repo for easy issue entry. Before tasks are entered the project managers should agree on milestones based on the Project objectives. Issues should be tracked against Milestones so progress can be measured and planned for. Tagging Issues When entering issues tagging can be used to further organize work or make work more visible to team members. Code Quality Standards Regardless of Language: Default to lowerCamelCase naming convention Use static code analysis tools to improve code quality and consistency Code modifications within a repository should be performed on a branch, that will be merged to master via a pull request once approved. Provide meaningful code comments All commits must include a useful commit message Style Guides Consistent style guidelines for each language should be used. Where possible, openly published standards by authorities providing or using the language will be used. Example: Google has openly published style guides for many languages in wide use on their open source projects, and these can be adopted for use in this project: Google Language Specific Styleguides Static Code Analysis Static code analysis tools should be used when possible, to monitor and improve code quality. This may be integrated in the local development environment, automated repository commit checks, automated CI/CD pipelines, or other steps in the code development process. Git and Branching All code work should be done in an isolated or feature branch off of the master branch. Before starting work on new code, developers should create their feature branch using a standard naming convention determined by the project. Branch Names Branch names should follow this patter: <your github username>/issue-<github issue number> . This will ensure there are no branch name conflicts, and anyone looking for your branch will know what it is called based on the issue addressed. For example if your username was letsGoOs, and you were working on issue 8, then your branch name would be letsGoOs/issue-8 . If you wanted to make a new branch to continue your work on your issue then add a suffix with an incremented number. To continue the previous example if you wanted to make a second branch for your issue 8 work your second branch would be called letsGoOs/issue-8-2 . Merging and Pull Requests When work is complete, and after static code analysis has been performed, the developer should submit a pull request in Github. A pull request template has been provided, and developers should take care to fill out the form as completely as possible when submitting new pull requests omitting any sections that are deemed unnecessary for that particular submission. Pull requests should require at least 1 review from another verified team member before they are approved and merged into the master branch. While not strictly required, it is recommended that pull requests are submitted early on in the development process with the intention of maintaining high visibility over the work while it is in progress.","title":"Best Practices"},{"location":"Best_Practices/#best-practices","text":"Code for Baltimore projects should be built with the intention of deploying on Heroku or Netlify . For details on Heroku Best Practices see their developer documentation . Best Practices Project Management Projects Issues and Milestones Tagging Issues Code Quality Standards Style Guides Static Code Analysis Git and Branching Branch Names Merging and Pull Requests","title":"Best Practices"},{"location":"Best_Practices/#project-management","text":"We are using Github Issues to track outstanding issues and work for projects.","title":"Project Management"},{"location":"Best_Practices/#projects","text":"Github Projects help organize our repositories by creating a Kanban board to track issues. These boards can be automatically generated by Github when creating the Project and should include a Todo, In Progress, Under Review, Reviewer Approved, and Done column. As issues are added to a Project they should be added to the board. A repo can have one or many Projects or boards at any given time.","title":"Projects"},{"location":"Best_Practices/#issues-and-milestones","text":"When breaking down work it is important to add tasks to the Github project. For convenience various types of issues have templates built into this repo for easy issue entry. Before tasks are entered the project managers should agree on milestones based on the Project objectives. Issues should be tracked against Milestones so progress can be measured and planned for.","title":"Issues and Milestones"},{"location":"Best_Practices/#tagging-issues","text":"When entering issues tagging can be used to further organize work or make work more visible to team members.","title":"Tagging Issues"},{"location":"Best_Practices/#code-quality-standards","text":"Regardless of Language: Default to lowerCamelCase naming convention Use static code analysis tools to improve code quality and consistency Code modifications within a repository should be performed on a branch, that will be merged to master via a pull request once approved. Provide meaningful code comments All commits must include a useful commit message","title":"Code Quality Standards"},{"location":"Best_Practices/#style-guides","text":"Consistent style guidelines for each language should be used. Where possible, openly published standards by authorities providing or using the language will be used. Example: Google has openly published style guides for many languages in wide use on their open source projects, and these can be adopted for use in this project: Google Language Specific Styleguides","title":"Style Guides"},{"location":"Best_Practices/#static-code-analysis","text":"Static code analysis tools should be used when possible, to monitor and improve code quality. This may be integrated in the local development environment, automated repository commit checks, automated CI/CD pipelines, or other steps in the code development process.","title":"Static Code Analysis"},{"location":"Best_Practices/#git-and-branching","text":"All code work should be done in an isolated or feature branch off of the master branch. Before starting work on new code, developers should create their feature branch using a standard naming convention determined by the project.","title":"Git and Branching"},{"location":"Best_Practices/#branch-names","text":"Branch names should follow this patter: <your github username>/issue-<github issue number> . This will ensure there are no branch name conflicts, and anyone looking for your branch will know what it is called based on the issue addressed. For example if your username was letsGoOs, and you were working on issue 8, then your branch name would be letsGoOs/issue-8 . If you wanted to make a new branch to continue your work on your issue then add a suffix with an incremented number. To continue the previous example if you wanted to make a second branch for your issue 8 work your second branch would be called letsGoOs/issue-8-2 .","title":"Branch Names"},{"location":"Best_Practices/#merging-and-pull-requests","text":"When work is complete, and after static code analysis has been performed, the developer should submit a pull request in Github. A pull request template has been provided, and developers should take care to fill out the form as completely as possible when submitting new pull requests omitting any sections that are deemed unnecessary for that particular submission. Pull requests should require at least 1 review from another verified team member before they are approved and merged into the master branch. While not strictly required, it is recommended that pull requests are submitted early on in the development process with the intention of maintaining high visibility over the work while it is in progress.","title":"Merging and Pull Requests"},{"location":"Code_of_Conduct/","text":"Code for Baltimore Code of Conduct Derived from Code for America's Code of Conduct The Code for America community expects that Code for America network activities, events, and digital forums: Are a safe and respectful environment for all participants. Are a place where people are free to fully express their identities. Presume the value of others. Everyone\u2019s ideas, skills, and contributions have value. Don\u2019t assume everyone has the same context, and encourage questions. Find a way for people to be productive with their skills (technical and not) and energy. Use language such as \u201cyes/and\u201d, not \u201cno/but.\u201d Encourage members and participants to listen as much as they speak. Strive to build tools that are open and free technology for public use. Activities that aim to foster public use, not private gain, are prioritized. Prioritize access for and input from those who are traditionally excluded from the civic process. Work to ensure that the community is well-represented in the planning, design, and implementation of civic tech. This includes encouraging participation from women, minorities, and traditionally marginalized groups. Actively involve community groups and those with subject matter expertise in the decision-making process. Ensure that the relationships and conversations between community members, the local government staff and community partners remain respectful, participatory, and productive. Provide an environment where people are free from discrimination or harassment. Code for America reserves the right to ask anyone in violation of these policies not to participate in Code for America network activities, events, and digital forums. Code for America's Anti-Harassment Policy This anti-harassment policy is based on the example policy from the Geek Feminism wiki, created by the Ada Initiative and other volunteers. This policy is based on several other policies, including the Ohio LinuxFest anti-harassment policy, written by Esther Filderman and Beth Lynn Eicher, and the Con Anti-Harassment Project. Mary Gardiner, Valerie Aurora, Sarah Smith, and Donna Benjamin generalized the policies and added supporting material. Many members of LinuxChix, Geek Feminism and other groups contributed to this work. All Code for America network activities, events, and digital forums and their staff, presenters, and participants are held to an anti-harassment policy, included below. In addition to governing our own events by this policy, Code for America will only lend our brand and fund groups that offer an anti-harassment policy to their attendees. For information on how to offer an anti-harassment policy to your group, see this guide . Code for America is dedicated to providing a harassment-free experience for everyone regardless of gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, age, or religion. We do not tolerate harassment of staff, presenters, and participants in any form. Sexual language and imagery is not appropriate for any Code for America event or network activity, including talks. Anyone in violation of these policies may expelled from Code for America network activities, events, and digital forums, at the discretion of the event organizer or forum administrator. Harassment includes but is not limited to: offensive verbal or written comments related to gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, religion; sexual images in public spaces; deliberate intimidation; stalking; following; harassing photography or recording; sustained disruption of talks or other events; inappropriate physical contact; unwelcome sexual attention; unwarranted exclusion; and patronizing language or action. If a participant engages in harassing behavior, the organizers may take any action they deem appropriate, including warning the offender or expulsion from Code for America network activities, events, and digital forums. If you are being harassed, notice that someone else is being harassed, or have any other concerns, please contact a member of the event staff or forum administrator immediately. You can contact them at [EVENT ORGANIZER/FORUM ADMINISTRATOR EMAIL AND PHONE NUMBER]. Event staff or forum administrators will be happy to help participants contact hotel/venue security or local law enforcement, provide escorts, or otherwise assist those experiencing harassment to feel safe for the duration of the event. If you cannot reach an event organizer or forum administrator and/or it is an emergency, please call 911 and/or remove yourself from the situation. You can also contact Code for America about harassment at safespace@codeforamerica.org and feel free to use the email template below. Code for America staff acknowledge that we are not always in a position to evaluate a given situation due to the number of events and the fact that our team is not always present. However, we are hopeful that by providing these guidelines we are establishing a community that jointly adheres to these values and can provide an environment that is welcoming to all. We value your attendance and hope that by communicating these expectations widely we can all enjoy a harassment-free environment. Email Template for Anti-Harassment Reporting SUBJECT: Safe Space alert at [EVENT NAME] I am writing because of harassment at a Code for America Communities event, (NAME, PLACE, DATE OF EVENT). You can reach me at (CONTACT INFO). Thank you.","title":"Code of Conduct"},{"location":"Code_of_Conduct/#code-for-baltimore-code-of-conduct","text":"","title":"Code for Baltimore Code of Conduct"},{"location":"Code_of_Conduct/#derived-from-code-for-americas-code-of-conduct","text":"The Code for America community expects that Code for America network activities, events, and digital forums: Are a safe and respectful environment for all participants. Are a place where people are free to fully express their identities. Presume the value of others. Everyone\u2019s ideas, skills, and contributions have value. Don\u2019t assume everyone has the same context, and encourage questions. Find a way for people to be productive with their skills (technical and not) and energy. Use language such as \u201cyes/and\u201d, not \u201cno/but.\u201d Encourage members and participants to listen as much as they speak. Strive to build tools that are open and free technology for public use. Activities that aim to foster public use, not private gain, are prioritized. Prioritize access for and input from those who are traditionally excluded from the civic process. Work to ensure that the community is well-represented in the planning, design, and implementation of civic tech. This includes encouraging participation from women, minorities, and traditionally marginalized groups. Actively involve community groups and those with subject matter expertise in the decision-making process. Ensure that the relationships and conversations between community members, the local government staff and community partners remain respectful, participatory, and productive. Provide an environment where people are free from discrimination or harassment. Code for America reserves the right to ask anyone in violation of these policies not to participate in Code for America network activities, events, and digital forums.","title":"Derived from Code for America's Code of Conduct"},{"location":"Code_of_Conduct/#code-for-americas-anti-harassment-policy","text":"This anti-harassment policy is based on the example policy from the Geek Feminism wiki, created by the Ada Initiative and other volunteers. This policy is based on several other policies, including the Ohio LinuxFest anti-harassment policy, written by Esther Filderman and Beth Lynn Eicher, and the Con Anti-Harassment Project. Mary Gardiner, Valerie Aurora, Sarah Smith, and Donna Benjamin generalized the policies and added supporting material. Many members of LinuxChix, Geek Feminism and other groups contributed to this work. All Code for America network activities, events, and digital forums and their staff, presenters, and participants are held to an anti-harassment policy, included below. In addition to governing our own events by this policy, Code for America will only lend our brand and fund groups that offer an anti-harassment policy to their attendees. For information on how to offer an anti-harassment policy to your group, see this guide . Code for America is dedicated to providing a harassment-free experience for everyone regardless of gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, age, or religion. We do not tolerate harassment of staff, presenters, and participants in any form. Sexual language and imagery is not appropriate for any Code for America event or network activity, including talks. Anyone in violation of these policies may expelled from Code for America network activities, events, and digital forums, at the discretion of the event organizer or forum administrator. Harassment includes but is not limited to: offensive verbal or written comments related to gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, religion; sexual images in public spaces; deliberate intimidation; stalking; following; harassing photography or recording; sustained disruption of talks or other events; inappropriate physical contact; unwelcome sexual attention; unwarranted exclusion; and patronizing language or action. If a participant engages in harassing behavior, the organizers may take any action they deem appropriate, including warning the offender or expulsion from Code for America network activities, events, and digital forums. If you are being harassed, notice that someone else is being harassed, or have any other concerns, please contact a member of the event staff or forum administrator immediately. You can contact them at [EVENT ORGANIZER/FORUM ADMINISTRATOR EMAIL AND PHONE NUMBER]. Event staff or forum administrators will be happy to help participants contact hotel/venue security or local law enforcement, provide escorts, or otherwise assist those experiencing harassment to feel safe for the duration of the event. If you cannot reach an event organizer or forum administrator and/or it is an emergency, please call 911 and/or remove yourself from the situation. You can also contact Code for America about harassment at safespace@codeforamerica.org and feel free to use the email template below. Code for America staff acknowledge that we are not always in a position to evaluate a given situation due to the number of events and the fact that our team is not always present. However, we are hopeful that by providing these guidelines we are establishing a community that jointly adheres to these values and can provide an environment that is welcoming to all. We value your attendance and hope that by communicating these expectations widely we can all enjoy a harassment-free environment.","title":"Code for America's Anti-Harassment Policy"},{"location":"Code_of_Conduct/#email-template-for-anti-harassment-reporting","text":"SUBJECT: Safe Space alert at [EVENT NAME] I am writing because of harassment at a Code for America Communities event, (NAME, PLACE, DATE OF EVENT). You can reach me at (CONTACT INFO). Thank you.","title":"Email Template for Anti-Harassment Reporting"},{"location":"Tech_Spec/","text":"Tech Spec The Tech Spec is an important part of a project, but it's a part that's often overlooked or skipped. The intention of this document is to organize everyone's thoughts on the project into one simple, succinct document. It doesn't have to be super detailed but filling out this document will help keep everyone focused on the project goal. Tech Spec Overview Scenarios Non Goals Minimum Viable Product Diorama-rama Components Roadmap Contact Info Overview This section should be comprised of 1-3 short paragraphs giving a high-level overview of what the project hopes to accomplish. This overview should quickly define what the project hopes to do, what this document will cover, and what will not be covered. Scenarios This section (and subsections) should describe a couple of real-world scenarios that demonstrate the need for the project. This should include an example of the problem, and an example of how the project will resolve that problem. It is recommended that at least 2 scenarios are provided. Non Goals Simply put: what are you not doing with the project at this time? This section is vital to keeping everyone on task and avoid gold-plating. This section can be broken down to illustrate what won't be considered now, but what may be considered in future iterations of the project. Minimum Viable Product Now that you've defined what you won't do with this project (at least in the beginning): what are you going to do? What is the minimum functionality required to launch a successful initial product? Define that here! Diorama-rama Can you put your project into pictures? Sure you can! We recommend using draw.io because it's free and you can make pretty diagrams of all sorts like this: Components Break down your project into as many different sections or components as possible. This could include various pages for a web app, or endpoints for an API project just to name a couple of examples. Try to include any wireframes or mock-ups you can to fully illustrate your idea for each piece! Roadmap Give some timelines. These don't have to be fully detailed, but it's good to set goals and make them visible. Any dates here should match Milestones set in the github project. Contact Info Give as much, or as little, info as you want here.","title":"Tech Spec"},{"location":"Tech_Spec/#tech-spec","text":"The Tech Spec is an important part of a project, but it's a part that's often overlooked or skipped. The intention of this document is to organize everyone's thoughts on the project into one simple, succinct document. It doesn't have to be super detailed but filling out this document will help keep everyone focused on the project goal. Tech Spec Overview Scenarios Non Goals Minimum Viable Product Diorama-rama Components Roadmap Contact Info","title":"Tech Spec"},{"location":"Tech_Spec/#overview","text":"This section should be comprised of 1-3 short paragraphs giving a high-level overview of what the project hopes to accomplish. This overview should quickly define what the project hopes to do, what this document will cover, and what will not be covered.","title":"Overview"},{"location":"Tech_Spec/#scenarios","text":"This section (and subsections) should describe a couple of real-world scenarios that demonstrate the need for the project. This should include an example of the problem, and an example of how the project will resolve that problem. It is recommended that at least 2 scenarios are provided.","title":"Scenarios"},{"location":"Tech_Spec/#non-goals","text":"Simply put: what are you not doing with the project at this time? This section is vital to keeping everyone on task and avoid gold-plating. This section can be broken down to illustrate what won't be considered now, but what may be considered in future iterations of the project.","title":"Non Goals"},{"location":"Tech_Spec/#minimum-viable-product","text":"Now that you've defined what you won't do with this project (at least in the beginning): what are you going to do? What is the minimum functionality required to launch a successful initial product? Define that here!","title":"Minimum Viable Product"},{"location":"Tech_Spec/#diorama-rama","text":"Can you put your project into pictures? Sure you can! We recommend using draw.io because it's free and you can make pretty diagrams of all sorts like this:","title":"Diorama-rama"},{"location":"Tech_Spec/#components","text":"Break down your project into as many different sections or components as possible. This could include various pages for a web app, or endpoints for an API project just to name a couple of examples. Try to include any wireframes or mock-ups you can to fully illustrate your idea for each piece!","title":"Components"},{"location":"Tech_Spec/#roadmap","text":"Give some timelines. These don't have to be fully detailed, but it's good to set goals and make them visible. Any dates here should match Milestones set in the github project.","title":"Roadmap"},{"location":"Tech_Spec/#contact-info","text":"Give as much, or as little, info as you want here.","title":"Contact Info"}]}